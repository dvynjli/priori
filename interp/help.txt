Q. Do we need variable in env for all SSA variables?
A. Yes. Otherwise we need to do computation on source program, which require making a c++ parser.

Q. Load and AtomicLoad (and store) can be handled same way?
A. From Apron point of view - yes, 
    from Z3 - yes
    from static analyzer - no (race detection)

Q. How to handle interferences of a thread with itself if more than one instance of a thread is executing?
A. Not handling as of now. Multiple threads of a function are not supported.

Q. What to do for loops?
A. Can do manual unrooling. Will think about implementing support for widening and narrowing later

Q. What to do for function arguments?
A. Ignoring for now. Not to hard to add support for this

Q. Can we work with computing possible interferences ones? Is there a way for these interferneces to change
A. We can work with computing feasible interfernces ones before starting thread-modular analysis. 
    All possible interferences are fixed since loads and stores of global variables can not change (assuming no pointers).
    Feasiblity of these interferences depends upon memory order, program order and happens before relations, which can not change mid-analysis.

Q. The query to sat solver should be in it's negation form?
A. No Need.

Q. MHB of thread create and join should be with first/last global load/store? 
A. Have to be careful when doing this. Another option is to add the dominated rule of all the instructions,
    which is less effective as well as harder to do.
Q. If there is a thread with no global operations, will this approach suffice?
A. We can consider pthread create/join instructions as global instructions and add MHB of first/last global load/store  with these.
    Also need to set last global for same environment in l-s pair

Q. How to encode MustNotReadFrom? RF->false won't work, since it is not horn clause.
A. If I create a new relation NRF, how to specify it's relation with RF? Can it work without that???
    Yes. We have to add RFs and then query for or of NRFs. If it is sat, the interference is infeasible

Q. Query has to be read-from of all threads. How to encode interferences? 
    If query is RFs of all thread, and then thread-modular analysis is done, result will be too overapprozimated.
A. Don't need it anymore

Q. In ex T1: x_rel=1; || T2: x_rel=2; || T3: a=Rx_acq; b=Rx_acq , if a reads from T1 and b reads from T3, 
    what should be the release head after b?
A. The possible options are release head of {T1}, {T2} or {T1, T2}. But whatever option we choose, 
    the environment of both T1 and T2 will be carried to the thread T3. So the computation will be correct.

Q. In cmp and logical instructions, what are the consequences of adding return variable value to environment?
A. If we add these values in cmp instructions, which are used in some logical operation. the second variable values 
    will be 0 in environment of first instruction and 1 in environment of second instruction. Since these values are disjoint,
    meet of the true (or false) branchs will be bottom. So we will not be able to do the correct analysis.
Q. In such a case, will it give us correct result to do the analysis without adding these values?
A. In first look, it seems to be fine for the reason that soul purpose of these SSA variables is branching.
    If these variables are used someplace else, we need a better approach.

Q. In case Rel-Acq-sync we are coping and domain of all the variables, do we need to prune out infeasible interferences?
A. Pruning out these interfs is not required i.e. we can remove the rel-acq-seq rule from our inference rules.
Q. Will removing this lead to faster performance of Z3? If yes, then how such an approach can be presented in paper?
A. ???

Q. Can we do something to remove the infeasible interferences coming from only two threads? i.e. invoke z3 only to 
    prune away transitive dependecies among threads and remove non-transitive one's using abstraction or some checking?
A. It might be possible since a lot of interferences are effectively giving the same result even now
    ???

Q. Can we use event structure style approach to prune interfernces? If needed notation of conflicting and invisible 
    events can be used.
A. No. That is a different analysis strategy altogether. Doesn't seem like they can be merged.

Q. Are there invarient generation tools for concurent programs?
A. huddini (not for concurrent)
    ???

Instructions that need Apron interface-
    BinOp   +, -, *, /, %, &&, ||, rmw, 
            &, | (can be added later)
    UnaryOp !, load, store
            -, ~ (can be added later)
    CmpXchg
    Function calls (can be added later)
Instructions that need Z3 interface-
    thread create, thread join, fences, lock,
Lazy join of environment (same as Kusano-FSE16)

TODO:
    init local vars with TOP, not zero
    get load store pairs only ones (from initThreadDetails) - 
        need to stop analysis if load reads from a store that is unreachable so far (should not be in domain map)
        with this assertion can be checked and stooped mid-analysis
        can optimize this
    fix changing relHead to null if relaxed write is from same thread
    control structure dependent static analysis
        dominate rules - not needed
    change pthread to thread
    getting preRelWrie from previous BB
    copy context of preRelWrie in case of relaxed to acquire sync
        if need to carry conditionally based on relHead, change carryEnvironment()
    Fix error with octagon domain again
    Fix error in carrying env between BB. check assertion 2 in test25
    Fix test21 by adding one iteration for all store with all relaxed store of other threads
    Fix test28 - check comments in out_faulty

Other functionality that might be added
    Race detection on non-atomics - 
        if a non aomic load can read from more than one writes
        can be done at the time of interference feasibl=ility checking
    creation of more than one thread of a function
        need to change the MHB adding for thread create


Possible Optimizations:
    LoadStore map
    while checking if fixed point is reached, we are comparing domain of all the Instructions. It will be sufficient to compare domain of only stores
        But efficiently  doing this will require changing the data structures and store loads saperately from rest of the thread instr
    combine some of the interfernce based on flow
    delete from environment if domain is bottom - optimize isUnreachable()
    create interfernce based on data and control dependecies. will result in less z3 queries
        might be also delete data dep rule from z3
    reduce number of variables
    try reducing number of rules
        this will decrese time of fiexed point computation
        but requires to add more rules to Z3
    try adding mhb rules at static time - check if it reduces the time
    try to remove rel-acq-seq2 rule from z3 by applying the interferce same as isRelSeq in case of relaxed write of same thread 
        need to maintain most recent rel write of a thread as relHeads ???
    
    Z3Helper:
        use bit vectors of smaller size
        don't init again and again - Won't work since every set of rules and hence their fixedpoints are different.
            need to figure out how to remove rules
            or can use different threads for different queries if z3 and cpp vectors are serializable

    parallelization
        checking feasiblity of interfernces with analysis of other thread
        analysis of all threads for 1 iteration
    
    Memory Optimizations
        Reduce number of maps (if maps are taking too much time):
            run a pass to give instr id to each intruction and store the environment of the intructions in this order or make a wrapper around Instructions
        Make sure that the ApDomain and other objects are deleted from memory
    
    

for laptop
export CPLUS_INCLUDE_PATH=/home/divyanjali/apron/include/
export LIBRARY_PATH=/home/divyanjali/apron/lib/
export LD_LIBRARY_PATH=/home/divyanjali/apron/lib/
 
for lab system
export LIBRARY_PATH=/usr/local/lib/
export LD_LIBRARY_PATH=/usr/local/lib/