-tti : Analysis pass providing the TargetTransformInfo http://llvm.org/doxygen/classllvm_1_1TargetIRAnalysis.html
-targetlibinfo : Target Library Information
-tbaa : Type-Based Alias Analysis
-scoped-noalias :  ScopedNoAlias alias-analysis pass, which implements metadata-based scoped no-alias support. http://llvm.org/doxygen/ScopedNoAliasAA_8cpp_source.html
-assumption-cache-tracker : An immutable pass that tracks lazily created AssumptionCache objects.
-verify : Module Verifier
-simplifycfg : Performs dead code elimination and basic block merging
-domtree : This pass is a simple dominator construction algorithm for finding forward dominators.
-sroa : scalar replacement of aggregates transformation. breaks up alloca instructions of aggregate type (structure or array) into individual alloca instructions for each member if possible. Then, if possible, it transforms the individual alloca instructions into nice clean scalar SSA form.
-early-cse : This pass performs a simple dominator tree walk that eliminates trivially redundant instructions. http://llvm.org/doxygen/EarlyCSE_8cpp_source.html
-lower-expect : This pass lowers the 'expect' intrinsic to LLVM metadata. This pass lowers the 'expect' intrinsic to LLVM metadata.
-forceattrs : Force set function attributes. 
-inferattrs : Infer set function attributes
**	-ipsccp : Interprocedural Sparse Conditional Constant Propagation
**	-globalopt : Dead Global Elimination 
-mem2reg : Promote Memory to Register
-deadargelim : Dead Argument Elimination
-basicaa : Basic Alias Analysis (stateless AA impl)
-aa : 
**	-instcombine : Combine redundant instructions
-basiccg : yet to be written
-globals : Globals Alias Analysis
-prune-eh : Remove unused exception handling info
-always-inline : Inliner for always_inline functions
-functionattrs : Deduce function attributesÂ¶
-lazy-value-info : Interface for lazy computation of value constraint information.
-jump-threading : Jump Threading
-correlated-propagation :
-tailcallelim : Tail Call Elimination
**	-reassociate : Reassociate commutative expressions 
-loops : Natural Loop Information
**-loop-simplify : Canonicalize natural loops
-lcssa : Loop-Closed SSA Form Pass
-loop-rotate : A simple loop rotation transformation.
**	-licm : Loop Invariant Code Motion
-loop-unswitch : This pass transforms loops that contain branches on loop-invariant conditions to have multiple loops.
-scalar-evolution : analyze and catagorize scalar expressions in loops. useful for induction variable substitution and strength reduction.
-indvars : Canonicalize Induction Variables
-loop-idiom : This pass implements an idiom recognizer that transforms simple loops into a non-loop form
-loop-deletion : Delete dead loops
-loop-unroll : Unroll loops
-memdep : Memory Dependence Analysis
-memcpyopt : MemCpy Optimization
-sccp : Sparse Conditional Constant Propagation
-demanded-bits : bits that are not demanded can be either zero or one without affecting control or data flow
-bdce : Bit-Tracking Dead Code Elimination pass
-dse : Dead Store Elimination
**	-adce : Aggressive Dead Code Elimination
-barrier : A No-Op Barrier Pass.  nonce pass intended to allow manipulation of the implicitly nesting pass manager
-rpo-functionattrs : Deduce function attributes in RPO (ReversePostOrder) http://llvm.org/doxygen/classllvm_1_1ReversePostOrderFunctionAttrsPass.html
-float2int :  demote floating point operations to work on integers -branch-prob : evaluate branch probabilties
-block-freq 
-loop-accesses : provides dependence information for the memory accesses of a loop. 
-loop-vectorize : loop-vectorize
-alignment-from-assumptions : to set the alignments of load, stores and memory intrinsics based on the truth expressions of assume intrinsics
-strip-dead-prototypes : Strip Unused Function Prototypes

